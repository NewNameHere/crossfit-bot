import os
import logging
import asyncio
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from flask import Flask
from threading import Thread
from trainings import trainings

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
START_DATE = datetime(2025, 6, 30)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render
web_app = Flask(__name__)

@web_app.route("/")
def home():
    return "‚úÖ Samuel CrossFit Bot is running."

@web_app.route("/ping")
def ping():
    return "pong"

# –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
REACTIONS = [
    "–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™",
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞! –î–æ –∑–∞–≤—Ç—Ä–∞ üèãÔ∏è",
    "–ö—Ä–∞—Å–∞–≤—á–∏–∫! –û–¥–∏–Ω —à–∞–≥ –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏ üî•",
    "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ üëä",
    "–ú–æ–ª–æ–¥–µ—Ü! –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å üôå"
]

# –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async def send_training():
    while True:
        now = datetime.utcnow()
        if now.hour == 6 and now.minute == 0:  # 09:00 –ø–æ –ú–°–ö
            delta_days = (now.date() - START_DATE.date()).days
            day_index = delta_days % len(trainings)
            training = trainings[day_index]
            text = f"üèãÔ∏è –î–µ–Ω—å {day_index + 1}: {training['title']}\n\n{training['description']}\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ?"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ", callback_data="done")]
            ])
            if CHAT_ID:
                await bot.send_message(chat_id=CHAT_ID, text=text, reply_markup=keyboard)
        await asyncio.sleep(60)

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
@dp.callback_query()
async def on_button(callback: types.CallbackQuery):
    if callback.data == "done":
        reply = random.choice(REACTIONS)
        await callback.answer(reply, show_alert=True)

# –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message()
async def on_message(message: types.Message):
    await message.reply("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∂–¥—ë—Ç —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(send_training())
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
def run_flask():
    web_app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    flask_thread = Thread(target=run_flask)
    flask_thread.start()
    asyncio.run(main())
