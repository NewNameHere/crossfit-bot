import os
import logging
import asyncio
import random
from datetime import datetime
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from trainings import trainings

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
START_DATE = datetime(2025, 6, 30)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render (–Ω–µ –¥–∞—Å—Ç —É—Å–Ω—É—Ç—å –±–æ—Ç—É)
web_app = Flask(__name__)

@web_app.route("/")
def home():
    return "Samuel CrossFit Bot is running."

@web_app.route("/ping")
def ping():
    return "pong"

# –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–Ω–æ–ø–∫—É
REACTIONS = [
    "–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™",
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞! –î–æ –∑–∞–≤—Ç—Ä–∞ üèãÔ∏è",
    "–ö—Ä–∞—Å–∞–≤—á–∏–∫! –û–¥–∏–Ω —à–∞–≥ –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏ üî•",
    "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ üëä",
    "–ú–æ–ª–æ–¥–µ—Ü! –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å üôå"
]

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ 09:00 –ø–æ –ú–æ—Å–∫–≤–µ (06:00 UTC)
async def send_training():
    while True:
        now = datetime.utcnow()
        if now.hour == 6 and now.minute == 0:
            delta_days = (now.date() - START_DATE.date()).days
            day_index = delta_days % len(trainings)
            training = trainings[day_index]

            text = f"üèãÔ∏è –î–µ–Ω—å {day_index + 1}: {training['title']}\n\n{training['description']}\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ?"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ", callback_data="done")]]
            )

            if CHAT_ID:
                await bot.send_message(chat_id=CHAT_ID, text=text, reply_markup=keyboard)

        await asyncio.sleep(60)

# –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query()
async def on_button_press(callback: types.CallbackQuery):
    if callback.data == "done":
        reply = random.choice(REACTIONS)
        await callback.answer(reply, show_alert=True)

# –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
@dp.message()
async def on_message(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∂–¥—ë—Ç —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@dp.startup()
async def on_startup(dispatcher):
    asyncio.create_task(send_training())

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling(bot))
    web_app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
